/**
 * [description]
 */
declare class BaseSound {
    /**
     * @param manager - Reference to the current sound manager instance.
     * @param key - Asset key for the sound.
     * @param config - An optional config object containing default sound settings.
     */
    constructor(manager: Phaser.Sound.BaseSoundManager, key: string, config: object);

}

/**
 * Adds a marker into the current sound. A marker is represented by name, start time, duration, and optionally config object.
 * This allows you to bundle multiple sounds together into a single audio file and use markers to jump between them for playback.
 * @param marker - Marker object
 */
declare function addMarker(marker: ISoundMarker): boolean;

/**
 * Updates previously added marker.
 * @param marker - Marker object with updated values.
 */
declare function updateMarker(marker: ISoundMarker): boolean;

/**
 * Removes a marker from the sound.
 * @param markerName - The name of the marker to remove.
 */
declare function removeMarker(markerName: string): ISoundMarker | null;

/**
 * Play this sound, or a marked section of it.
 * It always plays the sound from the start. If you want to start playback from a specific time
 * you can set 'seek' setting of the config object, provided to this call, to that value.
 * @param [markerName=''] - If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound.
 * @param [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.
 */
declare function play(markerName?: string, config?: ISoundConfig): boolean;

/**
 * Pauses the sound.
 */
declare function pause(): boolean;

/**
 * Resumes the sound.
 */
declare function resume(): boolean;

/**
 * Stop playing this sound.
 */
declare function stop(): boolean;

/**
 * Method used internally for applying config values to some of the sound properties.
 */
declare function applyConfig(): void;

/**
 * Method used internally for resetting values of some of the config properties.
 */
declare function resetConfig(): void;

/**
 * Update method called automatically by sound manager on every game step.
 * @param time - The current timestamp as generated by the Request Animation Frame or SetTimeout.
 * @param delta - The delta time elapsed since the last frame.
 */
declare function update(time: number, delta: number): void;

/**
 * Destroys this sound and all associated events and marks it for removal from the sound manager.
 */
declare function destroy(): void;

/**
 * Method used internally to calculate total playback rate of the sound.
 */
declare function setRate(): void;

/**
 * The sound manager is responsible for playing back audio via Web Audio API or HTML Audio tag as fallback.
 * The audio file type and the encoding of those files are extremely important.
 * Not all browsers can play all audio formats.
 * There is a good guide to what's supported [here](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).
 */
declare class BaseSoundManager {
    /**
     * @param game - Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

}

/**
 * Adds a new sound into the sound manager.
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function add(key: string, config?: ISoundConfig): ISound;

/**
 * Adds a new audio sprite sound into the sound manager.
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function addAudioSprite(key: string, config?: ISoundConfig): IAudioSpriteSound;

/**
 * Enables playing sound on the fly without the need to keep a reference to it.
 * Sound will auto destroy once its playback ends.
 * @param key - Asset key for the sound.
 * @param [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.
 */
declare function play(key: string, extra?: ISoundConfig | ISoundMarker): boolean;

/**
 * Enables playing audio sprite sound on the fly without the need to keep a reference to it.
 * Sound will auto destroy once its playback ends.
 * @param key - Asset key for the sound.
 * @param spriteName - The name of the sound sprite to play.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function playAudioSprite(key: string, spriteName: string, config?: ISoundConfig): boolean;

/**
 * Removes a sound from the sound manager.
 * The removed sound is destroyed before removal.
 * @param sound - The sound object to remove.
 */
declare function remove(sound: ISound): boolean;

/**
 * Removes all sounds from the sound manager that have an asset key matching the given value.
 * The removed sounds are destroyed before removal.
 * @param key - The key to match when removing sound objects.
 */
declare function removeByKey(key: string): number;

/**
 * Pauses all the sounds in the game.
 */
declare function pauseAll(): void;

/**
 * Resumes all the sounds in the game.
 */
declare function resumeAll(): void;

/**
 * Stops all the sounds in the game.
 */
declare function stopAll(): void;

/**
 * Method used internally for unlocking audio playback on devices that
 * require user interaction before any sound can be played on a web page.
 * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).
 */
declare function unlock(): void;

/**
 * Method used internally for pausing sound manager if
 * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.
 */
declare function onBlur(): void;

/**
 * Method used internally for resuming sound manager if
 * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.
 */
declare function onFocus(): void;

/**
 * Update method called on every game step.
 * Removes destroyed sounds and updates every active sound in the game.
 * @param time - The current timestamp as generated by the Request Animation Frame or SetTimeout.
 * @param delta - The delta time elapsed since the last frame.
 */
declare function update(time: number, delta: number): void;

/**
 * Destroys all the sounds in the game and all associated events.
 */
declare function destroy(): void;

/**
 * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.
 * @param callbackfn - Callback function. (sound: ISound, index: number, array: ISound[]) => void
 * @param [scope] - Callback context.
 */
declare function forEachActiveSound(callbackfn: Function, scope?: any): void;

/**
 * HTML5 Audio implementation of the sound.
 */
declare class HTML5AudioSound {
    /**
     * @param manager - Reference to the current sound manager instance.
     * @param key - Asset key for the sound.
     * @param [config={}] - An optional config object containing default sound settings.
     */
    constructor(manager: Phaser.Sound.HTML5AudioSoundManager, key: string, config?: ISoundConfig);

}

/**
 * Play this sound, or a marked section of it.
 * It always plays the sound from the start. If you want to start playback from a specific time
 * you can set 'seek' setting of the config object, provided to this call, to that value.
 * @param [markerName=''] - If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound.
 * @param [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.
 */
declare function play(markerName?: string, config?: ISoundConfig): boolean;

/**
 * Pauses the sound.
 */
declare function pause(): boolean;

/**
 * Resumes the sound.
 */
declare function resume(): boolean;

/**
 * Stop playing this sound.
 */
declare function stop(): boolean;

/**
 * Used internally to do what the name says.
 */
declare function pickAndPlayAudioTag(): boolean;

/**
 * This method performs the audio tag pooling logic. It first looks for
 * unused audio tag to assign to this sound object. If there are no unused
 * audio tags, based on HTML5AudioSoundManager#override property value, it
 * looks for sound with most advanced playback and hijacks its audio tag or
 * does nothing.
 */
declare function pickAudioTag(): boolean;

/**
 * Method used for playing audio tag and catching possible exceptions
 * thrown from rejected Promise returned from play method call.
 */
declare function playCatchPromise(): void;

/**
 * Used internally to do what the name says.
 */
declare function stopAndReleaseAudioTag(): void;

/**
 * Method used internally to reset sound state, usually when stopping sound
 * or when hijacking audio tag from another sound.
 */
declare function reset(): void;

/**
 * Method used internally by sound manager for pausing sound if
 * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.
 */
declare function onBlur(): void;

/**
 * Method used internally by sound manager for resuming sound if
 * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.
 */
declare function onFocus(): void;

/**
 * Update method called automatically by sound manager on every game step.
 * @param time - The current timestamp as generated by the Request Animation Frame or SetTimeout.
 * @param delta - The delta time elapsed since the last frame.
 */
declare function update(time: number, delta: number): void;

/**
 * Calls Phaser.Sound.BaseSound#destroy method
 * and cleans up all HTML5 Audio related stuff.
 */
declare function destroy(): void;

/**
 * Method used internally to determine mute setting of the sound.
 */
declare function setMute(): void;

/**
 * Method used internally to calculate total volume of the sound.
 */
declare function setVolume(): void;

/**
 * Method used internally to calculate total playback rate of the sound.
 */
declare function setRate(): void;

/**
 * HTML5AudioSoundManager
 */
declare class HTML5AudioSoundManager {
    /**
     * HTML5 Audio implementation of the sound manager.
     * @param game - Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

}

/**
 * Adds a new sound into the sound manager.
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function add(key: string, config?: ISoundConfig): Phaser.Sound.HTML5AudioSound;

/**
 * Unlocks HTML5 Audio loading and playback on mobile
 * devices on the initial explicit user interaction.
 */
declare function unlock(): void;

/**
 * Method used internally for resuming sound manager if
 * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.
 */
declare function onFocus(): void;

/**
 * Calls Phaser.Sound.BaseSoundManager#destroy method
 * and cleans up all HTML5 Audio related stuff.
 */
declare function destroy(): void;

/**
 * Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters
 * to check if sound manager is locked and then either perform action immediately or queue it
 * to be performed once the sound manager gets unlocked.
 * @param sound - Sound object on which to perform queued action.
 * @param prop - Name of the method to be called or property to be assigned a value to.
 * @param [value] - An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.
 */
declare function isLocked(sound: Phaser.Sound.HTML5AudioSound, prop: string, value?: any): boolean;

declare namespace Sound {
}

/**
 * No audio implementation of the sound. It is used if audio has been
 * disabled in the game config or the device doesn't support any audio.
 * 
 * It represents a graceful degradation of sound logic that provides
 * minimal functionality and prevents Phaser projects that use audio from
 * breaking on devices that don't support any audio playback technologies.
 */
declare class NoAudioSound {
    /**
     * @param manager - Reference to the current sound manager instance.
     * @param key - Asset key for the sound.
     * @param [config={}] - An optional config object containing default sound settings.
     */
    constructor(manager: Phaser.Sound.NoAudioSoundManager, key: string, config?: ISoundConfig);

}

/**
 * [description]
 */
declare function addMarker(): boolean;

/**
 * [description]
 */
declare function updateMarker(): boolean;

/**
 * [description]
 */
declare function removeMarker(): boolean;

/**
 * [description]
 */
declare function play(): boolean;

/**
 * [description]
 */
declare function pause(): boolean;

/**
 * [description]
 */
declare function resume(): boolean;

/**
 * [description]
 */
declare function stop(): boolean;

/**
 * [description]
 */
declare function destroy(): void;

/**
 * No audio implementation of the sound manager. It is used if audio has been
 * disabled in the game config or the device doesn't support any audio.
 * 
 * It represents a graceful degradation of sound manager logic that provides
 * minimal functionality and prevents Phaser projects that use audio from
 * breaking on devices that don't support any audio playback technologies.
 */
declare class NoAudioSoundManager {
    /**
     * @param game - Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

}

/**
 * [description]
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function add(key: string, config?: ISoundConfig): ISound;

/**
 * [description]
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function addAudioSprite(key: string, config?: ISoundConfig): IAudioSpriteSound;

/**
 * [description]
 */
declare function play(): boolean;

/**
 * [description]
 */
declare function playAudioSprite(): boolean;

/**
 * [description]
 * @param sound - The sound object to remove.
 */
declare function remove(sound: ISound): boolean;

/**
 * [description]
 * @param key - The key to match when removing sound objects.
 */
declare function removeByKey(key: string): number;

/**
 * [description]
 */
declare function destroy(): void;

/**
 * [description]
 * @param callbackfn - Callback function. (sound: ISound, index: number, array: ISound[]) => void
 * @param [scope] - Callback context.
 */
declare function forEachActiveSound(callbackfn: Function, scope?: any): void;

/**
 * Creates a Web Audio, HTML5 Audio or No Audio Sound Manager based on config and device settings.
 * @param game - Reference to the current game instance.
 */
declare function SoundManagerCreator(game: Phaser.Game): void;

/**
 * Web Audio API implementation of the sound.
 */
declare class WebAudioSound {
    /**
     * @param manager - Reference to the current sound manager instance.
     * @param key - Asset key for the sound.
     * @param [config={}] - An optional config object containing default sound settings.
     */
    constructor(manager: Phaser.Sound.WebAudioSoundManager, key: string, config?: ISoundConfig);

}

/**
 * Play this sound, or a marked section of it.
 * It always plays the sound from the start. If you want to start playback from a specific time
 * you can set 'seek' setting of the config object, provided to this call, to that value.
 * @param [markerName=''] - If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound.
 * @param [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.
 */
declare function play(markerName?: string, config?: ISoundConfig): boolean;

/**
 * Pauses the sound.
 */
declare function pause(): boolean;

/**
 * Resumes the sound.
 */
declare function resume(): boolean;

/**
 * Stop playing this sound.
 */
declare function stop(): boolean;

/**
 * Used internally to do what the name says.
 */
declare function createAndStartBufferSource(): void;

/**
 * Used internally to do what the name says.
 */
declare function createAndStartLoopBufferSource(): void;

/**
 * Used internally to do what the name says.
 */
declare function createBufferSource(): AudioBufferSourceNode;

/**
 * Used internally to do what the name says.
 */
declare function stopAndRemoveBufferSource(): void;

/**
 * Used internally to do what the name says.
 */
declare function stopAndRemoveLoopBufferSource(): void;

/**
 * Method used internally for applying config values to some of the sound properties.
 */
declare function applyConfig(): void;

/**
 * Update method called automatically by sound manager on every game step.
 * @param time - The current timestamp as generated by the Request Animation Frame or SetTimeout.
 * @param delta - The delta time elapsed since the last frame.
 */
declare function update(time: number, delta: number): void;

/**
 * Calls Phaser.Sound.BaseSound#destroy method
 * and cleans up all Web Audio API related stuff.
 */
declare function destroy(): void;

/**
 * Method used internally to calculate total playback rate of the sound.
 */
declare function setRate(): void;

/**
 * Method used internally for calculating current playback time of a playing sound.
 */
declare function getCurrentTime(): void;

/**
 * Method used internally for calculating the time
 * at witch the loop source should start playing.
 */
declare function getLoopTime(): void;

/**
 * Web Audio API implementation of the sound manager.
 */
declare class WebAudioSoundManager {
    /**
     * @param game - Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

}

/**
 * Method responsible for instantiating and returning AudioContext instance.
 * If an instance of an AudioContext class was provided trough the game config,
 * that instance will be returned instead. This can come in handy if you are reloading
 * a Phaser game on a page that never properly refreshes (such as in an SPA project)
 * and you want to reuse already instantiated AudioContext.
 * @param game - Reference to the current game instance.
 */
declare function createAudioContext(game: Phaser.Game): AudioContext;

/**
 * Adds a new sound into the sound manager.
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function add(key: string, config?: ISoundConfig): Phaser.Sound.WebAudioSound;

/**
 * Unlocks Web Audio API on iOS devices on the initial touch event.
 * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).
 */
declare function unlock(): void;

/**
 * Method used internally for pausing sound manager if
 * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.
 */
declare function onBlur(): void;

/**
 * Method used internally for resuming sound manager if
 * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.
 */
declare function onFocus(): void;

/**
 * Calls Phaser.Sound.BaseSoundManager#destroy method
 * and cleans up all Web Audio API related stuff.
 */
declare function destroy(): void;

/**
 * Adds a marker into the current sound. A marker is represented by name, start time, duration, and optionally config object.
 * This allows you to bundle multiple sounds together into a single audio file and use markers to jump between them for playback.
 * @param marker - Marker object
 */
declare function addMarker(marker: ISoundMarker): boolean;

/**
 * Updates previously added marker.
 * @param marker - Marker object with updated values.
 */
declare function updateMarker(marker: ISoundMarker): boolean;

/**
 * Removes a marker from the sound.
 * @param markerName - The name of the marker to remove.
 */
declare function removeMarker(markerName: string): ISoundMarker | null;

/**
 * Method used internally for applying config values to some of the sound properties.
 */
declare function applyConfig(): void;

/**
 * Method used internally for resetting values of some of the config properties.
 */
declare function resetConfig(): void;

/**
 * Adds a new audio sprite sound into the sound manager.
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function addAudioSprite(key: string, config?: ISoundConfig): IAudioSpriteSound;

/**
 * Enables playing sound on the fly without the need to keep a reference to it.
 * Sound will auto destroy once its playback ends.
 * @param key - Asset key for the sound.
 * @param [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.
 */
declare function play(key: string, extra?: ISoundConfig | ISoundMarker): boolean;

/**
 * Enables playing audio sprite sound on the fly without the need to keep a reference to it.
 * Sound will auto destroy once its playback ends.
 * @param key - Asset key for the sound.
 * @param spriteName - The name of the sound sprite to play.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function playAudioSprite(key: string, spriteName: string, config?: ISoundConfig): boolean;

/**
 * Removes a sound from the sound manager.
 * The removed sound is destroyed before removal.
 * @param sound - The sound object to remove.
 */
declare function remove(sound: ISound): boolean;

/**
 * Removes all sounds from the sound manager that have an asset key matching the given value.
 * The removed sounds are destroyed before removal.
 * @param key - The key to match when removing sound objects.
 */
declare function removeByKey(key: string): number;

/**
 * Pauses all the sounds in the game.
 */
declare function pauseAll(): void;

/**
 * Resumes all the sounds in the game.
 */
declare function resumeAll(): void;

/**
 * Stops all the sounds in the game.
 */
declare function stopAll(): void;

/**
 * Update method called on every game step.
 * Removes destroyed sounds and updates every active sound in the game.
 * @param time - The current timestamp as generated by the Request Animation Frame or SetTimeout.
 * @param delta - The delta time elapsed since the last frame.
 */
declare function update(time: number, delta: number): void;

/**
 * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.
 * @param callbackfn - Callback function. (sound: ISound, index: number, array: ISound[]) => void
 * @param [scope] - Callback context.
 */
declare function forEachActiveSound(callbackfn: Function, scope?: any): void;

/**
 * Adds a marker into the current sound. A marker is represented by name, start time, duration, and optionally config object.
 * This allows you to bundle multiple sounds together into a single audio file and use markers to jump between them for playback.
 * @param marker - Marker object
 */
declare function addMarker(marker: ISoundMarker): boolean;

/**
 * Updates previously added marker.
 * @param marker - Marker object with updated values.
 */
declare function updateMarker(marker: ISoundMarker): boolean;

/**
 * Removes a marker from the sound.
 * @param markerName - The name of the marker to remove.
 */
declare function removeMarker(markerName: string): ISoundMarker | null;

/**
 * Method used internally for resetting values of some of the config properties.
 */
declare function resetConfig(): void;

/**
 * Adds a new audio sprite sound into the sound manager.
 * @param key - Asset key for the sound.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function addAudioSprite(key: string, config?: ISoundConfig): IAudioSpriteSound;

/**
 * Enables playing sound on the fly without the need to keep a reference to it.
 * Sound will auto destroy once its playback ends.
 * @param key - Asset key for the sound.
 * @param [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.
 */
declare function play(key: string, extra?: ISoundConfig | ISoundMarker): boolean;

/**
 * Enables playing audio sprite sound on the fly without the need to keep a reference to it.
 * Sound will auto destroy once its playback ends.
 * @param key - Asset key for the sound.
 * @param spriteName - The name of the sound sprite to play.
 * @param [config] - An optional config object containing default sound settings.
 */
declare function playAudioSprite(key: string, spriteName: string, config?: ISoundConfig): boolean;

/**
 * Removes a sound from the sound manager.
 * The removed sound is destroyed before removal.
 * @param sound - The sound object to remove.
 */
declare function remove(sound: ISound): boolean;

/**
 * Removes all sounds from the sound manager that have an asset key matching the given value.
 * The removed sounds are destroyed before removal.
 * @param key - The key to match when removing sound objects.
 */
declare function removeByKey(key: string): number;

/**
 * Pauses all the sounds in the game.
 */
declare function pauseAll(): void;

/**
 * Resumes all the sounds in the game.
 */
declare function resumeAll(): void;

/**
 * Stops all the sounds in the game.
 */
declare function stopAll(): void;

/**
 * Update method called on every game step.
 * Removes destroyed sounds and updates every active sound in the game.
 * @param time - The current timestamp as generated by the Request Animation Frame or SetTimeout.
 * @param delta - The delta time elapsed since the last frame.
 */
declare function update(time: number, delta: number): void;

/**
 * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.
 * @param callbackfn - Callback function. (sound: ISound, index: number, array: ISound[]) => void
 * @param [scope] - Callback context.
 */
declare function forEachActiveSound(callbackfn: Function, scope?: any): void;

